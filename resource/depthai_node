#!/usr/bin/env python3

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
import depthai as dai
import numpy as np
import array
import curses
from PIL import Image as PImage

def main(args=None):
    rclpy.init(args=args)
    node = Node('depthai_node')

    # Start defining a pipeline
    pipeline = dai.Pipeline()
    # Define a source - color camera
    cam_rgb = pipeline.createColorCamera()
    cam_rgb.setPreviewSize(960, 540)
    cam_rgb.setBoardSocket(dai.CameraBoardSocket.RGB)
    cam_rgb.setResolution(dai.ColorCameraProperties.SensorResolution.THE_1080_P)
    cam_rgb.setInterleaved(False)

    # Create output
    xout_rgb = pipeline.createXLinkOut()
    xout_rgb.setStreamName("rgb")
    cam_rgb.preview.link(xout_rgb.input)

    # Pipeline defined, now the device is assigned and pipeline is started
    device = dai.Device(pipeline)
    device.startPipeline()

    # Output queue will be used to get the rgb frames from the output defined above
    q_rgb = device.getOutputQueue(name="rgb", maxSize=4, blocking=False)

    publisher = node.create_publisher(Image, 'camera', 2)

    image = Image(width=960, height=540, encoding='bgr8')
    image.header.frame_id = 'camera_frame'

    print('Starting camera_node ...')
    stdscr = curses.initscr()
    stdscr.nodelay(True)
    counter = 0
    while True:
        in_rgb = q_rgb.get()  # blocking call, will wait until a new data has arrived

        # data is originally represented as a flat 1D array, it needs to be converted into HxWxC form
        shape = (3, in_rgb.getHeight(), in_rgb.getWidth())
        print('Frame {}: {}\r'.format(counter, shape))

        frame_rgb = in_rgb.getData().reshape(shape).transpose(1, 2, 0).astype(np.uint8)
        image.data = array.array('B', frame_rgb.tobytes())
        image.step = counter

        publisher.publish(image)
        counter += 1

        c = stdscr.getch()
        if c == ord('c') :
            print('Calibrate! \n\r')
            im = PImage.fromarray(frame_rgb)
            im.save("image{}.png".format(counter))

        if c == curses.KEY_BREAK or c == curses.KEY_CANCEL or c == 27:
            break

    del stdscr
    rclpy.shutdown()


if __name__ == '__main__':
    main()

